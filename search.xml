<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python闭包</title>
      <link href="/2020/07/16/Python%E9%97%AD%E5%8C%85/"/>
      <url>/2020/07/16/Python%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-闭包"><a href="#1-闭包" class="headerlink" title="1.闭包"></a>1.闭包</h3><p>我们都知道在数学中有闭包的概念，但此处我要说的闭包是计算机编程语言中的概念，它被广泛的使用 于函数式编程。</p><p>关于闭包的概念，官方的定义颇为严格，也很难理解，在《Python语言及其应用》一书中关于闭包的解 释我觉得比较好 – <strong>闭包是一个可以由另一个函数动态生成的函数，并且可以改变和存储函数外创建的变 量的值</strong>。乍一看，好像还是比较很难懂，下面用一个简单的例子来解释一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span> </span><br><span class="line">...print(a)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun() </span><br><span class="line"><span class="number">1</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">()</span>:</span></span><br><span class="line">...b = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b) </span><br><span class="line">Traceback (most recent call last): </span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">'b'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>毋庸置疑，第一段程序是可以运行成功的，a = 1 定义的变量在函数里可以被调用，但是反过来，第二 段程序则出现了报错。<br>在函数 fun() 里可以直接使用外面的 a = 1，但是在函数 fun1() 外面不能使用它里面所定义的 b = 1，如 果我们根据作用域的关系来解释，是没有什么异议的，但是如果在某种特殊情况下，我们必须要在函数 外面使用函数里面的变量，该怎么办呢？<br>先来看下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span> </span><br><span class="line">...a = <span class="number">1</span></span><br><span class="line">...<span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">()</span>:</span> </span><br><span class="line">... <span class="keyword">return</span> a </span><br><span class="line">...<span class="keyword">return</span> fun1</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = fun() </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f()) </span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>在函数 fun() 里面，有 a = 1 和 函数 fun1() ,它们两个都在函数 fun() 的环境里面，但是它们两个是互不干扰的，所以 a 相对于 fun1() 来说是自由变量，并且在函数 fun1() 中应用了这个自由变量 – 这个 <strong>fun1()</strong> 就是我们所定义的<strong>闭包</strong>。<br>闭包实际上就是一个函数，但是这个函数要具有 1.定义在另外一个函数里面(嵌套函数)；2.引用其所在 环境的自由变量。<br>上述例子通过闭包在 fun() 执行完毕时，a = 1依然可以在 f() 中，即 fun1() 函数中存在，并没有被收 回，所以 print(f()) 才得到了结果。<br>当我们在某些时候需要对事务做更高层次的抽象，用闭包会相当舒服。比如我们要写一个二元一次函 数，如果不使用闭包的话相信你可以轻而易举的写出来，下面让我们来用闭包的方式完成这个一元二次 方程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a,b,c)</span>:</span> </span><br><span class="line">...<span class="function"><span class="keyword">def</span> <span class="title">para</span><span class="params">(x)</span>:</span></span><br><span class="line">...<span class="keyword">return</span> a*x**<span class="number">2</span> + b*x + c </span><br><span class="line">...<span class="keyword">return</span> para</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = fun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f(<span class="number">2</span>)) </span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><p>上面的函数中，f = fun(1,2,3) 定义了一个一元二次函数的函数对象，x^2 + 2x + 3，如果要计算 x = 2 ， 该一元二次函数的值，只需要计算 f(2) 即可，这种写法更简洁一些。</p><p>内容参考Rocky0429微信公众号</p>]]></content>
      
      
      <categories>
          
          <category> 基础概念 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础概念 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环 迭代 递归 遍历</title>
      <link href="/2020/07/15/%E5%BE%AA%E7%8E%AF%E3%80%81%E8%BF%AD%E4%BB%A3%E3%80%81%E9%80%92%E5%BD%92%E3%80%81%E9%81%8D%E5%8E%86/"/>
      <url>/2020/07/15/%E5%BE%AA%E7%8E%AF%E3%80%81%E8%BF%AD%E4%BB%A3%E3%80%81%E9%80%92%E5%BD%92%E3%80%81%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-循环（loop）"><a href="#1-循环（loop）" class="headerlink" title="1.循环（loop）"></a>1.循环（loop）</h3><p>循环是指在满足条件的情况下，重复执行同一段代码，比如 while 语句</p><h3 id="2-迭代（Iterate）"><a href="#2-迭代（Iterate）" class="headerlink" title="2.迭代（Iterate）"></a>2.迭代（Iterate）</h3><p>迭代是指按照某种顺序逐个访问对象中的每一项，比如 for 语句</p><h3 id="3-递归（recursion）"><a href="#3-递归（recursion）" class="headerlink" title="3.递归（recursion）"></a>3.递归（recursion）</h3><p>递归是指一个函数不断调用自身的行为，比如斐波那契数列</p><h3 id="4-遍历（traversal）"><a href="#4-遍历（traversal）" class="headerlink" title="4.遍历（traversal）"></a>4.遍历（traversal）</h3><p>遍历是指按照一定的规则访问树形结构中的每个节点，而且每个节点都只访问一次</p><h3 id="Python中的逐个访问"><a href="#Python中的逐个访问" class="headerlink" title="Python中的逐个访问"></a>Python中的逐个访问</h3><p>在 Python 中，如果想要访问对象中的每个元素，可以像下面这样做，以列表举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_list = [<span class="string">'r'</span>,<span class="string">'o'</span>,<span class="string">'c'</span>,<span class="string">'k'</span>,<span class="string">'y'</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> my_list:</span><br><span class="line">...print(i,end=<span class="string">' '</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">r o c k y </span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>除了上述方法以外，还可以像下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_iter = iter(my_list)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_iter.__next__()</span><br><span class="line"><span class="string">'r'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_iter.__next__() </span><br><span class="line"><span class="string">'o'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_iter.__next__() </span><br><span class="line"><span class="string">'c'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_iter.__next__() </span><br><span class="line"><span class="string">'k'</span></span><br><span class="line">&gt;&gt;&gt;my_iter.__next__() </span><br><span class="line"><span class="string">'y'</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_iter.__next__()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt; </span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p>上面的 iter() 是一个内建函数，返回的是一个迭代器对象</p><p>在 Python3 中，所有的迭代器对象都有 next() 方法，迭代器，当然是可迭代的，在上面的例子中， next() 就是要获得下一个对象，但是作为一个 “懒惰” 的程序员来说，上面的那种方法一个个的敲太麻 烦了，所以就有了下面的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">...print(my_iter.__next__())</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">Traceback (most recent call last): </span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt; </span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p>上面出现了错误，我们先不管，再来它一次：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_iter = iter(my_list) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">...print(my_iter.__next__())</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">r </span><br><span class="line">o </span><br><span class="line">c </span><br><span class="line">k </span><br><span class="line">y </span><br><span class="line">Traceback (most recent call last): </span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt; </span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p>看了上面演示的例子可以发现，如果我们用 for 循环来写的话，当到了末尾的时候就自动结束了，但是 用了 next() 的话，当完成最后一个的时候它不会自动结束，还会向下继续，但是后面已经没有元素 了，所以就发出了一个 StopIteration 的信息，即停止迭代。<br>在这我们还要再关注一下迭代器对象的另一个特点，看上上个的那个例子就可以知道，对象 my_iter 被 迭代结束后，即每个元素都读取了一遍之后，指针就移到了最后一个元素后面，如果想要再访问的话， 指针并没有自动移动到初始位置，所以会报 StopIteration，如果想要重新开始的话，就需要重新载入 迭代对象。</p><h3 id="文件迭代器"><a href="#文件迭代器" class="headerlink" title="文件迭代器"></a>文件迭代器</h3><p>现在有一个 “test.txt” 的文件，文件内容是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">My name <span class="keyword">is</span> Rocky </span><br><span class="line">I love Python </span><br><span class="line">a，hhhhhhh</span><br></pre></td></tr></table></figure><p>现在用迭代器来尝试操作这个文件，我们其实在之前两天讲述有关文件的知识的时候已经讲过了，就是 用 readline() 一行一行的读，当然在实际操作中，我们是绝对不会这样做的，因为我们 “懒” 啊，一定要 让它自动进行，比较常用的方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'test.txt'</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> f: </span><br><span class="line">...print(line,end=<span class="string">' '</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">My name <span class="keyword">is</span> Rocky</span><br><span class="line">I love Python </span><br><span class="line">a，hhhhhhh &gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>上面的过程当然用 next() 也能够读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'test.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.__next__() </span><br><span class="line"><span class="string">'My name is Rocky\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.__next__() </span><br><span class="line"><span class="string">'I love Python\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.__next__() </span><br><span class="line"><span class="string">'a，hhhhhhh'</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.__next__() </span><br><span class="line">Traceback (most recent call last): </span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt; </span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p>用 next() 就可以直接读取每行的内容，这就说明文件是天生可迭代的对象，不需要用 iter() 转换。 再者，我们用 for 来实现迭代，本质上就是自动调用 next() ，只不过这个工作被 for 偷偷的做了，所以 for 是活雷锋无疑了。</p><p>文章参考Rocky0429公众号中的部分内容</p>]]></content>
      
      
      <categories>
          
          <category> 基础概念 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础概念 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java命名规范</title>
      <link href="/2020/07/07/Java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
      <url>/2020/07/07/Java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、命名规范</p><p>1、 项目名全部小写</p><p>2、 包名全部小写</p><p>3、 类名首字母大写，如果类名由多个单词组成，每个单词的首字母都要大写。</p><p>如：public class MyFirstClass{}</p><p>4、 变量名、方法名首字母小写，如果名称由多个单词组成，每个单词的首字母都要大写。</p><p>如：int index=0;</p><pre><code>public void toString(){}</code></pre><p>5、 常量名全部大写</p><p>如：public static final String GAME_COLOR=”RED”;</p><p>6、所有命名规则必须遵循以下规则：</p><p>1)、名称只能由字母、数字、下划线、$符号组成</p><p>2)、不能以数字开头</p><p>3)、名称不能使用JAVA中的关键字。</p><p>4)、坚决不允许出现中文及拼音命名。</p><p>二、注释规范</p><p>1、   类注释</p><p>在每个类前面必须加上类注释，注释模板如下：</p><p>/**</p><ul><li><p>Copyright (C), 2006-2010, ChengDu Lovo info. Co., Ltd.</p></li><li><p>FileName: Test.java</p></li><li><p>类的详细说明</p></li></ul><p>*</p><ul><li><p>@author 类创建者姓名</p><ul><li>@Date    创建日期</li></ul></li><li><p>@version 1.00</p></li></ul><p>*/</p><p>2、   属性注释</p><p>在每个属性前面必须加上属性注释，注释模板如下：</p><p>/** 提示信息 */</p><p>private String strMsg = null;</p><p>3、   方法注释</p><p>在每个方法前面必须加上方法注释，注释模板如下：</p><p>/**</p><ul><li>类方法的详细使用说明</li></ul><p>*</p><ul><li><p>@param 参数1 参数1的使用说明</p></li><li><p>@return 返回结果的说明</p></li><li><p>@throws 异常类型.错误代码 注明从此类方法中抛出异常的说明</p></li></ul><p>*/</p><p>4、   构造方法注释</p><p>在每个构造方法前面必须加上注释，注释模板如下：</p><p>/**</p><ul><li>构造方法的详细使用说明</li></ul><p>*</p><ul><li><p>@param 参数1 参数1的使用说明</p></li><li><p>@throws 异常类型.错误代码 注明从此类方法中抛出异常的说明</p></li></ul><p>*/</p><p>5、   方法内部注释</p><p>在方法内部使用单行或者多行注释，该注释根据实际情况添加。</p><p>如：//背景颜色</p><pre><code>Color bgColor = Color.RED</code></pre><p>内容仅供个人学习、记录使用，侵删</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>session的空属性判断问题</title>
      <link href="/2020/07/07/session%E7%9A%84%E7%A9%BA%E5%B1%9E%E6%80%A7%E5%88%A4%E6%96%AD%E9%97%AE%E9%A2%98/"/>
      <url>/2020/07/07/session%E7%9A%84%E7%A9%BA%E5%B1%9E%E6%80%A7%E5%88%A4%E6%96%AD%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    记录一个今天遇到的小问题：（新手编程，若有错误，希望各位及时指正，感激不尽）<br>​    首先，若后端放session时，某些属性为空值（比如下面的resume属性），则到了session里时会变为空字符串，而不是null。</p><p>原因：<br>​    首先什么是session？<br>​    “当访问服务器某个网页的时候，会在服务器端的内存里开辟一块内存，这块内存就叫做session”</p><p>​    由此可以看出，当访问页面的时候是已开辟了一段内存的，而null是不指向任何对象，不分配内存空间的;空字符串“”才会分配内存空间。</p><p>​    故此时一切对session里空属性的判断不能对null判断，而应是对空字符串判断，如下面的应为sj.resume!=’ ‘而不能是sj.resume！=null</p><p>​    下面是一段前端代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">function sendResume(jid,jobName,uname)&#123;</span><br><span class="line"></span><br><span class="line">        alert(&quot;点击确定开始投递&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;*定义个数组放发送的变量并赋值*&#x2F;</span><br><span class="line">        var sj &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        sj.jid&#x3D;jid;</span><br><span class="line">        sj.jobName&#x3D;jobName;</span><br><span class="line">        sj.uname&#x3D;uname;</span><br><span class="line">        sj.sid&#x3D;&#39;$&#123;session.sid &#125;&#39;;</span><br><span class="line">        sj.name&#x3D;&#39;$&#123;session.name &#125;&#39;;</span><br><span class="line">        sj.resume&#x3D;&#39;$&#123;session.resume&#125;&#39;;</span><br><span class="line">        &#x2F;*若后端放session时，某些属性为空值，则到了session里时会变为空字符串，</span><br><span class="line">            故此时一切对其空属性的判断不能对null判断，而是对空字符串判断，如下面的sj.resume!&#x3D;&#39;&#39; *&#x2F;</span><br><span class="line">        if (sj.resume!&#x3D;&#39;&#39;) &#123;</span><br><span class="line"></span><br><span class="line">            alert(&quot;要进入ajax了&quot;);</span><br><span class="line">          $.ajax(&#123;</span><br><span class="line">            &#x2F;*请求类型*&#x2F;</span><br><span class="line">            type:&quot;post&quot;,</span><br><span class="line">            &#x2F;*请求路径*&#x2F;</span><br><span class="line">            url:&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;application&#x2F;sendResume&quot;,</span><br><span class="line">            &#x2F;*设置类型*&#x2F;</span><br><span class="line">            contentType:&quot;application&#x2F;json;charset&#x3D;UTF-8&quot;,</span><br><span class="line">            &#x2F;*向后端传数据，stringify方法将sj转换为json格式*&#x2F;</span><br><span class="line">            data: JSON.stringify(sj),</span><br><span class="line">            &#x2F;*然后在这个弹窗里去显示出来*&#x2F;</span><br><span class="line">            success:function(data) &#123;</span><br><span class="line"></span><br><span class="line">                &#x2F;*后端return的值默认都装在叫data的变量里*&#x2F;</span><br><span class="line">                if(data&#x3D;&quot;0&quot;)&#123;</span><br><span class="line">                    alert(&quot;投递成功！&quot;);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    alert(&quot;投递失败！&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                window.location.reload();</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">            alert(&quot;请先上传简历！&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/06/hello-world/"/>
      <url>/2020/07/06/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Hello World！</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Demo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
