<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JSON 知识复习</title>
      <link href="/ArthurDream/2020/07/30/JSON%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/"/>
      <url>/ArthurDream/2020/07/30/JSON%E7%9F%A5%E8%AF%86%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\ArthurDream\assets\css\APlayer.min.css"><script src="\ArthurDream\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="JavaScript-JSON"><a href="#JavaScript-JSON" class="headerlink" title="JavaScript JSON"></a>JavaScript JSON</h2><p>JSON 是用于存储和传输数据的格式。</p><p>JSON 通常用于服务端向网页传递数据 。</p><h2 id="什么是-JSON"><a href="#什么是-JSON" class="headerlink" title="什么是 JSON?"></a>什么是 JSON?</h2><ul><li>JSON 英文全称 <strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation</li><li>JSON 是一种轻量级的数据交换格式。</li><li>JSON是独立的语言 *****</li><li>JSON 易于理解。</li></ul><ul><li>JSON 使用 JavaScript 语法，但是 JSON 格式仅仅是一个文本。 文本可以被任何编程语言读取及作为数据格式传递。</li></ul><h2 id="JSON-格式化后为-JavaScript-对象"><a href="#JSON-格式化后为-JavaScript-对象" class="headerlink" title="JSON 格式化后为 JavaScript 对象"></a>JSON 格式化后为 JavaScript 对象</h2><p>JSON 格式在语法上与创建 JavaScript 对象代码是相同的。</p><p>由于它们很相似，所以 JavaScript 程序可以很容易的将 JSON 数据转换为 JavaScript 对象。</p><h2 id="JSON-语法规则"><a href="#JSON-语法规则" class="headerlink" title="JSON 语法规则"></a>JSON 语法规则</h2><ul><li>数据为 键/值 对。</li><li>数据由逗号分隔。</li><li>大括号保存对象</li><li>方括号保存数组</li></ul><h2 id="JSON-数据-一个名称对应一个值"><a href="#JSON-数据-一个名称对应一个值" class="headerlink" title="JSON 数据 - 一个名称对应一个值"></a>JSON 数据 - 一个名称对应一个值</h2><p>JSON 数据格式为 键/值 对，就像 JavaScript 对象属性。</p><p>键/值对包括字段名称（在双引号中），后面一个冒号，然后是值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;name&quot;:&quot;Arthur&quot;</span><br></pre></td></tr></table></figure><h2 id="JSON-对象"><a href="#JSON-对象" class="headerlink" title="JSON 对象"></a>JSON 对象</h2><p>JSON 对象保存在大括号内。</p><p>就像在 JavaScript 中, 对象可以保存多个 键/值 对：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;"name":"Baidu", "url":"www.baidu.com"&#125;</span><br></pre></td></tr></table></figure><h2 id="JSON-数组"><a href="#JSON-数组" class="headerlink" title="JSON 数组"></a>JSON 数组</h2><p>JSON 数组保存在中括号内。</p><p>就像在 JavaScript 中, 数组可以包含对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"sites":[    </span><br><span class="line">&#123;"name":"Baidu", "url":"www.baidu.com"&#125;,     </span><br><span class="line">&#123;"name":"Google", "url":"www.google.com"&#125;,    </span><br><span class="line">&#123;"name":"Taobao", "url":"www.taobao.com"&#125; </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在以上实例中，对象 “sites” 是一个数组，包含了三个对象。</p><p>每个对象为站点的信息（网站名和网站地址）。</p><h2 id="JSON-字符串转换为-JavaScript-对象"><a href="#JSON-字符串转换为-JavaScript-对象" class="headerlink" title="JSON 字符串转换为 JavaScript 对象"></a>JSON 字符串转换为 JavaScript 对象</h2><p>通常我们从服务器中读取 JSON 数据，并在网页中显示数据。</p><p>简单起见，我们网页中直接设置 JSON 字符串 </p><p>首先，创建 JavaScript 字符串，字符串为 JSON 格式的数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var text = '&#123; "sites" : [' +</span><br><span class="line">'&#123; "name":"Baidu" , "url":"www.baidu.com" &#125;,' +</span><br><span class="line">'&#123; "name":"Google" , "url":"www.google.com" &#125;,' +</span><br><span class="line">'&#123; "name":"Taobao" , "url":"www.taobao.com" &#125; ]&#125;';</span><br></pre></td></tr></table></figure><p><strong>然后，使用 JavaScript 内置函数 JSON.parse() 将字符串转换为 JavaScript 对象:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var obj = JSON.parse(text);</span><br></pre></td></tr></table></figure><p>最后，在你的页面中使用新的 JavaScript 对象：</p><p><strong>实例代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>JSON实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>为 JSON 字符串创建对象<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> text = <span class="string">'&#123; "sites" : ['</span> +</span></span><br><span class="line"><span class="actionscript"><span class="string">'&#123; "name":"Baidu" , "url":"www.baidu.com" &#125;,'</span> +</span></span><br><span class="line"><span class="actionscript"><span class="string">'&#123; "name":"Google" , "url":"www.google.com" &#125;,'</span> +</span></span><br><span class="line"><span class="actionscript"><span class="string">'&#123; "name":"Taobao" , "url":"www.taobao.com" &#125; ]&#125;'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">obj = <span class="built_in">JSON</span>.parse(text);</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = obj.sites[<span class="number">1</span>].name + <span class="string">" "</span> + obj.sites[<span class="number">1</span>].url;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src= "/ArthurDream/img/loading.gif" data-src="C:%5CUsers%5C%E6%AE%B5%E6%A2%A6%E5%AE%87%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200802164743836.png" alt="image-20200802164743836"></p><h2 id="JavaScript-对象转换为JSON-字符串"><a href="#JavaScript-对象转换为JSON-字符串" class="headerlink" title="JavaScript 对象转换为JSON 字符串"></a>JavaScript 对象转换为JSON 字符串</h2><p>JSON 通常用于与服务端交换数据。</p><p>在向服务器发送数据时一般是字符串。</p><p>我们可以使用 JSON.stringify() 方法将 JavaScript 对象转换为字符串。</p><p><strong>语法:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.stringify(value[, replacer[, space]])</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><p>value:</p><p>必需， 要转换的 JavaScript 值（通常为对象或数组）。</p></li><li><p>replacer:</p><p>可选。用于转换结果的函数或数组。</p><p>如果 replacer 为函数，则 JSON.stringify 将调用该函数，并传入每个成员的键和值。使用返回值而不是原始值。如果此函数返回 undefined，则排除成员。根对象的键是一个空字符串：””。</p><p>如果 replacer 是一个数组，则仅转换该数组中具有键值的成员。成员的转换顺序与键在数组中的顺序一样。当 value 参数也为数组时，将忽略 replacer 数组。</p></li><li><p>space:</p><p>可选，文本添加缩进、空格和换行符，如果 space 是一个数字，则返回值文本在每个级别缩进指定数目的空格，如果 space 大于 10，则文本缩进 10 个空格。space 也可以使用非数字，如：\t。</p></li></ul><h2 id="JavaScript-对象转换"><a href="#JavaScript-对象转换" class="headerlink" title="JavaScript 对象转换"></a>JavaScript 对象转换</h2><p>例如我们向服务器发送以下数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123; "name":"baidu", "alexa":10000, "site":"www.baidu.com"&#125;;</span><br></pre></td></tr></table></figure><p>我们使用 JSON.stringify() 方法处理以上数据，将其转换为字符串：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var myJSON = JSON.stringify(obj);</span><br></pre></td></tr></table></figure><p>myJSON 为字符串。</p><p>我们可以将 myJSON 发送到服务器：</p><p><strong>实例代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>实例代码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>将 JavaScript 对象转换为 JSON 字符串<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> obj = &#123; <span class="string">"name"</span>:<span class="string">"baidu"</span>, <span class="string">"alexa"</span>:<span class="number">10000</span>, <span class="string">"site"</span>:<span class="string">"www.baidu.com"</span>&#125;;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> myJSON = <span class="built_in">JSON</span>.stringify(obj);</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = myJSON;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><img src= "/ArthurDream/img/loading.gif" data-src="C:%5CUsers%5C%E6%AE%B5%E6%A2%A6%E5%AE%87%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200802165250473.png" alt="image-20200802165250473"></p><h2 id="JavaScript-数组转换"><a href="#JavaScript-数组转换" class="headerlink" title="JavaScript 数组转换"></a>JavaScript 数组转换</h2><p>我们也可以将 JavaScript 数组转换为 JSON 字符串：</p><p><strong>实例:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [ "Google", "Runoob", "Taobao", "Facebook" ];</span><br><span class="line">var myJSON = JSON.stringify(arr);</span><br></pre></td></tr></table></figure><p>myJSON 为字符串。</p><p>我们可以将 myJSON 发送到服务器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>实例代码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>将 JavaScript 数组转换为 JSON 对象<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> arr = [ <span class="string">"Google"</span>, <span class="string">"Baidu"</span>, <span class="string">"Taobao"</span>, <span class="string">"Facebook"</span> ];</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> myJSON = <span class="built_in">JSON</span>.stringify(arr);</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = myJSON;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src= "/ArthurDream/img/loading.gif" data-src="C:%5CUsers%5C%E6%AE%B5%E6%A2%A6%E5%AE%87%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200802165434899.png" alt="image-20200802165434899"></p><p>（内容及部分代码引自菜鸟教程，非常好的自学网站，强烈推荐！）</p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自信鸡汤</title>
      <link href="/ArthurDream/2020/07/18/%E8%87%AA%E4%BF%A1%E9%B8%A1%E6%B1%A4/"/>
      <url>/ArthurDream/2020/07/18/%E8%87%AA%E4%BF%A1%E9%B8%A1%E6%B1%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\ArthurDream\assets\css\APlayer.min.css"><script src="\ArthurDream\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="如何变得自信起来？"><a href="#如何变得自信起来？" class="headerlink" title="如何变得自信起来？"></a>如何变得自信起来？</h2><p>（摘自知乎 心理指导）</p><p>自信，就是对自己能够达到某种目标的乐观、充分估计。美国作家爱默生说：“自信是成功的第一秘诀。”可以说，拥有自信就拥有无限机会。那么如何增强自信呢？</p><p>增强自信的第一个方法：<strong>关注自己的优点</strong>。在纸上列下十个优点，不论是哪方面（细心、眼睛好看等等，多多益善），在从事各种活动时，想想这些优点，并告诉自己有什么优点。这样有助你提升从事这些活动的自信，这叫做“自信的蔓延效应”。这一效应对提升自信效果很好。</p><p>增强自信的第二个方法：<strong>与自信的人多接触</strong>。“近朱者赤，近墨者黑”这一点对增强自信同样有效。</p><p>增强自信的第三个方法：<strong>自我心理暗示</strong>，不断对自己进行正面心理强化，避免对自己进行负面强化。一旦自己有所进步（不论多小）就对自己说：“我能行！”、“我很棒！”、“我能做得更好！”等等，这将不断提升自己的信心。</p><p>增强自信的第四个方法：<strong>树立自信的外部形象</strong>。首先，保持整洁、得体的仪表，有利于增强一个人的自信；其次，举止自信，如行路目视前方等，刚开始可能不习惯，但过一段时间后就会有发自内心的自信；另外，注意锻炼、保持健美的体形对增强自信也很有帮助。</p><p>增强自信的第五个方法：<strong>不可谦虚过度</strong>。谦虚是必要的，但不可过度，过分贬低自己对自信心的培养是极为不利的。</p><p>增强自信的第六个方法：<strong>学会微笑</strong>。微笑会增加幸福感，进而增强自信。</p><p>增强自信的第七个方法：<strong>扬长避短</strong>。在学习、生活、工作中，抓住机会展现自己的优势、特长，同时注意弥补自己的不足，不断进步，肯定能增强自信。</p><p>增强自信的第八个方法：<strong>阅读名人传记</strong>，因为很多知名人士成名前的自身资质、外部环境并不好，如果多看一些这方面的材料有助于提升自信心。</p><p>增强自信的第九个方法：<strong>做好充分准备</strong>。从事某项活动前如果能做好充分准备，那么，在从事这项活动时，必然较为自信，而且这利于顺利完成活动并增强整体自信心。</p><p>增强自信的第十个方法：<strong>给自己定恰当的目标</strong>，并且在目标达成后，定更高的目标。目标不能太高，否则不易达到，如果达不到，对自信心会有所破坏。</p><p>增强自信的第十一个方法：<strong>冒一次险</strong>。当你做了以前不敢做的事以后，你会发现：原来作这事并没有什么了不起！这对提升自信心很有帮助。</p><p>增强自信的第十二个方法：<strong>排除压力</strong>。过重的压力会使自己意志消沉，对自身产生怀疑，从而破坏自信心，学会排除压力对保持原有自信帮助很大。</p><p>增强自信的第十三个方法：<strong>做自己喜欢做的事</strong>。对自己喜欢做的事，因为比较投入，容易取得成功，继而产生成就感，这非常有利于自信心的提高。</p><p>增强自信的第十四个方法：<strong>保持健康</strong>。注意全面的营养、保证身体锻炼、保持快乐的心境，良好的生理、心理状况会使自己产生幸福感，进而产生自信心。</p><p>增强自信的第十五个方法：<strong>尽量依靠自己</strong>。有事尽量依靠自己解决，能不断激发自身的潜力，并且通过一次次的成功，不断提升自信水平。</p><h2 id="真正的自信来源于对自己作为一个人的信心。"><a href="#真正的自信来源于对自己作为一个人的信心。" class="headerlink" title="真正的自信来源于对自己作为一个人的信心。"></a>真正的自信来源于对自己作为一个人的信心。</h2><p><strong>无论成功或是失败，你都能够坦然面对，既不失望、愤怒，也不自责、绝望</strong>。你既不会因成功而忘乎所以，也不会因挫折而感到沮丧和抑郁。你或许会有强烈的愿望，希望自己做得好，表现出色，并为之付出巨大的努力，但在内心里，你能够接受真实的你。自信的真正来源在于自我接纳，无论好坏你都要接纳你自己，真正的友谊与接纳，表现为困境中的自我扶持。</p><p>学会享受成功，告诉自己：“这很棒，我要享受自己的成功。”即使是小的成功，也要学会表扬自己，你越是体验到成功的快乐，你就越会努力追求成功。如果你的努力仅出于恐惧。事情会变得令人厌烦，你要学会用奖励来激励自己，而不是用恐惧来惩罚自己。当你追求成功而不是避免失败时，你启用了大脑完全不同的部分。</p>]]></content>
      
      
      <categories>
          
          <category> 鸡汤 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象编程几个术语的理解</title>
      <link href="/ArthurDream/2020/07/17/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%87%A0%E4%B8%AA%E6%9C%AF%E8%AF%AD%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/ArthurDream/2020/07/17/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%87%A0%E4%B8%AA%E6%9C%AF%E8%AF%AD%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\ArthurDream\assets\css\APlayer.min.css"><script src="\ArthurDream\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="1-问题空间"><a href="#1-问题空间" class="headerlink" title="1.问题空间"></a>1.问题空间</h3><p>知道什么是 “<strong>问题空间</strong>” 是一个搬砖的必备基础，我们下面来看一下《维基百科》中关于它的定义： 问题空间是问题解决者对一个问题所达到的全部认识状态，它是由问题解决者利用问题所包含的信息和 已储存的信息主动构成的。<br>一个问题一般由三个方面来定义：<strong>初始状态</strong>（开始时的不完全的信息），<strong>目标状态</strong>（你希望获得的信息 或状态），<strong>操作</strong>（从初始状态到目标状态所采取的步骤）。这三个部分加在一起定义了问题空间。</p><h3 id="2-对象"><a href="#2-对象" class="headerlink" title="2.对象"></a>2.对象</h3><p>这里的 “对象” 不是你的 “对象”，英文单词是 Object，至于为什么翻译成对象我们不去追究，我们需要 知道的是” <strong>Python 中的一切都是对象</strong>“，不管你是字符串，函数还是类，都是对象。 那你可能问了，Python 都是对象有什么用么？简直是太有用了，这说明 Python 是面向对象编程的！ 大佬们对于对象的定义相当高深：一个对象要有自己的状态，行为和唯一的标识；所有相同类型的对象 所具有的结构和行为在它们共同的类中被定义。大佬们的话确实有水平，但是这个定义对于初学者来说 可能不太好理解。<br>其实简言之，对象应该具有属性（就是大佬们说的状态），方法（就是大佬们说的行为）和标识，但是 标识是自动就完成的，所以我们一般不用管它，所以<strong>一个对象主要就是有属性和方法，属性是说这个东 西是什么，方法是说这个东西能做什么。</strong></p><h3 id="3-面向对象"><a href="#3-面向对象" class="headerlink" title="3.面向对象"></a>3.面向对象</h3><p>面向对象(OOP)，是现在编程的主流。<strong>面向对象编程可以看作是一种在程序中包含各种独立且又互相调 用的对象的思想</strong>，这个和传统正好相反，传统的思想主张将程序直接看作是一系列对计算机下达的指 令，而面向对象编程中的每一个对象都应该能够接受数据，处理数据并且能将数据传达给其它对象，因 此它们每一个都可以看作是一个小型的机器，即对象。<br>目前来说面向对象编程推广了程序的灵活性和可维护性，并且在大型项目设计中广为应用。当我们提到 面向对象的时候，它不仅仅是指一种程序设计方法，更多意义上是一种程序开发方式。</p><h3 id="4-类"><a href="#4-类" class="headerlink" title="4.类"></a>4.类</h3><p>在目前所流行的高级编程语言中，“类” 是必须要有的，我们先来看《维基百科》中的定义：<br>在面向对象编程中，<strong>类 (class) 是一种面向对象计算机编程语言的构造，是创建对象的蓝图，描述了所 创建的对象共同的属性和方法。</strong><br>对于类更严格点的定义是由某种特定的元数据所组成的内聚的包。它描述了一些对象的行为规则，而这 些对象就被成为该类的实例。类有接口和结构，接口描述了如何通过方法与类及其实例互相操作，而结 构描述了一个实例中数据如何划分为多个属性。<br>支持类的编程语言在支持与类相关的各种特性方面都多多少少有一些微妙的差异。大多数都支持不同形 式的类继承。类的出现，为面向对象编程的三个最重要的特性（封装，继承，多态）提供了实现的手 段。<br>看到这里，你或许有这么一个认识，要面向对象编程就要用到类，虽然不是很严格，但是我们可以这么 说，当然了，反过来的话是不可以的。</p><p><strong>类是对某一群具有同样属性和方法的对象的抽象</strong>，比如长翅膀会飞的的生物，我们把它们统一称为 “鸟”。</p><h3 id="创建一个-“类”"><a href="#创建一个-“类”" class="headerlink" title="创建一个 “类”"></a>创建一个 “类”</h3><p>如何创建一个 “类”，为了更普遍性的说明，我来写一个具有通常类的结构的类，请看下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    具有通常类的结构的 Person 类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_sex</span><span class="params">(self,sex)</span>:</span></span><br><span class="line">        per_sex = &#123;&#125;</span><br><span class="line">        per_sex[self.name] = sex</span><br><span class="line">        <span class="keyword">return</span> per_sex</span><br></pre></td></tr></table></figure><p>上面的 Person 类是一个很常见的类，下面我来对它就行逐一解释：<br>在 Python3 中所有的类都是 object 的子类，正是因为这个原因，所以不用像 Python2 中那样要把对 object 的继承写出来。class Person：这是在声明创建一个名字是 “Person” 的类，关键词是 class，就和函数的 def 一样。类 的名字按照惯例一般用大写字母开头，如果名字是两个单词，那么两个单词的首字母都要大写，比如 HotDog，当然了如果你不想这样也是可以的，但是我希望你记住 “你的代码是给别人看的”，不要给别 人和自己以后读代码的时候带来麻烦。最后当所有的一切都结束的时候，别忘了在最后带上冒号。<br>接下来就是类里面的代码块，上面例子中类里的代码块看起来很熟悉，都是 def 这个关键词开头的函 数。你是对的，它们就是函数，但是你仔细看一下就会发现，这些函数跟我们在前面学过的函数略微不 同，它们的参数都有 “self”（<strong>要注意 self 是默认的第一个参数</strong>）。这个正是类中函数的特色，是为了跟 我们以前学过的函数区别开来，所以一般在类里的函数我们不叫它们函数，而叫它们 “方法”。所以<strong>当你 听到有人说 “方法” 的时候，不用奇怪，它和函数在本质上是一样的</strong>。</p><p>下面对类里的几个函数做一个简要的介绍。<br>def <strong>init</strong>(self,name)：这是一个特殊的方法，以<strong>双下划线</strong>开头和结尾，这样的方法其实在类里面还有很 多，统一叫它们 “特殊方法”。对于 init() 还有一个别的名字，叫 “构造函数”，也有叫它是 “初始化方法” 的，个人认为第二个更好一点，因为单从字面上来看，它对应的含义应该是初始化。所谓的初始化，就 是让类有一个基本的样子，而不是里面什么也没有，很多事情都要初始化，让事情有一个具体的起点状 态，比如你要吃饭，碗里得先有饭。在用类创建实例的时候，首先执行的是初始化方法。<br>在上面的例子中，初始化方法里的参数除了 self 以外，还有一个 name，在 Person 类被实例化的同 时，要传给它一个值。self.name = name 的意思是建立实例的一个属性，这个属性的名字也是 name，它的值等于参数 name 所传入的值。要注意的是，这里的属性 self.name 和参数 name 是纯属 巧合，你也可以写成 self.aaa = name，只不过这样写会觉得很别扭。<br>接下来的 def get_name(self) 和 def get_sex(self,sex) 是类里面的另外两个方法，这两个方法除了第一 个参数必须是 self 以外，其它跟函数没有什么区别。你只需要注意的是，两个方法中都用到了 self.name，属性的这种调用方式只能在类里面使用。</p><h3 id="“类”-的实例"><a href="#“类”-的实例" class="headerlink" title="“类” 的实例"></a>“类” 的实例</h3><p>类是对象的定义，实例才是真实的东西。比如 “人” 是一个类，但是 “人” 终究不是具体的某个会喘气 的，只有 “rocky” 才是具体的东西，但他是具有 “人” 这个类所定义的属性和方法。“rocky” 就是 “人” 这 个类的实例。<br>我们继续用上面那个类的例子，直接写一下调用这个类的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    boy = Person(<span class="string">'rocky'</span>)</span><br><span class="line">    print(boy.name)</span><br><span class="line">    name = boy.get_name()</span><br><span class="line">    print(name) </span><br><span class="line">    his_sex = boy.get_sex(<span class="string">'男'</span>)</span><br><span class="line">    print(his_sex)</span><br></pre></td></tr></table></figure><p>上面代码中 boy = Person(‘rocky’) 是利用上面的类创建的实例。创建实例的过程就是调用类 Person()， 首先执行的是初始化函数，上述例子中的初始化函数有两个参数，即 self 和 name，其中 self 是默认参 数，不需要传值，name 则需要给它传值，所以用Person(‘rocky’) 的样式。<br>boy 就是一个实例，它有属性和方法，self.name 是它的属性，<strong>boy.get_name() 和 boy.get_sex(‘男’)</strong> <strong>是通过实例来调用方法</strong>。<br>刚才是以 boy = Person(‘rocky’) 的方式创建了一个实例，仿照这个样式还可以建立更多的实例，比如 girl = Person(‘gakki’) 等，也就是说，一个类可以创建多个实例。</p><p>这就是通过类创建实例，并且通过实例来调用属性和方法的过程</p><p>内容引自Rocky0429博客</p>]]></content>
      
      
      <categories>
          
          <category> 基础概念 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础概念 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python闭包</title>
      <link href="/ArthurDream/2020/07/16/Python%E9%97%AD%E5%8C%85/"/>
      <url>/ArthurDream/2020/07/16/Python%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\ArthurDream\assets\css\APlayer.min.css"><script src="\ArthurDream\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-闭包"><a href="#1-闭包" class="headerlink" title="1.闭包"></a>1.闭包</h3><p>我们都知道在数学中有闭包的概念，但此处我要说的闭包是计算机编程语言中的概念，它被广泛的使用 于函数式编程。</p><p>关于闭包的概念，官方的定义颇为严格，也很难理解，在《Python语言及其应用》一书中关于闭包的解 释我觉得比较好 – <strong>闭包是一个可以由另一个函数动态生成的函数，并且可以改变和存储函数外创建的变 量的值</strong>。乍一看，好像还是比较很难懂，下面用一个简单的例子来解释一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span> </span><br><span class="line">...print(a)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun() </span><br><span class="line"><span class="number">1</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">()</span>:</span></span><br><span class="line">...b = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b) </span><br><span class="line">Traceback (most recent call last): </span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">'b'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>毋庸置疑，第一段程序是可以运行成功的，a = 1 定义的变量在函数里可以被调用，但是反过来，第二 段程序则出现了报错。<br>在函数 fun() 里可以直接使用外面的 a = 1，但是在函数 fun1() 外面不能使用它里面所定义的 b = 1，如 果我们根据作用域的关系来解释，是没有什么异议的，但是如果在某种特殊情况下，我们必须要在函数 外面使用函数里面的变量，该怎么办呢？<br>先来看下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span> </span><br><span class="line">...a = <span class="number">1</span></span><br><span class="line">...<span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">()</span>:</span> </span><br><span class="line">... <span class="keyword">return</span> a </span><br><span class="line">...<span class="keyword">return</span> fun1</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = fun() </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f()) </span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>在函数 fun() 里面，有 a = 1 和 函数 fun1() ,它们两个都在函数 fun() 的环境里面，但是它们两个是互不干扰的，所以 a 相对于 fun1() 来说是自由变量，并且在函数 fun1() 中应用了这个自由变量 – 这个 <strong>fun1()</strong> 就是我们所定义的<strong>闭包</strong>。<br>闭包实际上就是一个函数，但是这个函数要具有 1.定义在另外一个函数里面(嵌套函数)；2.引用其所在 环境的自由变量。<br>上述例子通过闭包在 fun() 执行完毕时，a = 1依然可以在 f() 中，即 fun1() 函数中存在，并没有被收 回，所以 print(f()) 才得到了结果。<br>当我们在某些时候需要对事务做更高层次的抽象，用闭包会相当舒服。比如我们要写一个二元一次函 数，如果不使用闭包的话相信你可以轻而易举的写出来，下面让我们来用闭包的方式完成这个一元二次 方程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a,b,c)</span>:</span> </span><br><span class="line">...<span class="function"><span class="keyword">def</span> <span class="title">para</span><span class="params">(x)</span>:</span></span><br><span class="line">...<span class="keyword">return</span> a*x**<span class="number">2</span> + b*x + c </span><br><span class="line">...<span class="keyword">return</span> para</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = fun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f(<span class="number">2</span>)) </span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><p>上面的函数中，f = fun(1,2,3) 定义了一个一元二次函数的函数对象，x^2 + 2x + 3，如果要计算 x = 2 ， 该一元二次函数的值，只需要计算 f(2) 即可，这种写法更简洁一些。</p><p>内容参考Rocky0429微信公众号</p>]]></content>
      
      
      <categories>
          
          <category> 基础概念 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础概念 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环 迭代 递归 遍历</title>
      <link href="/ArthurDream/2020/07/15/%E5%BE%AA%E7%8E%AF%E3%80%81%E8%BF%AD%E4%BB%A3%E3%80%81%E9%80%92%E5%BD%92%E3%80%81%E9%81%8D%E5%8E%86/"/>
      <url>/ArthurDream/2020/07/15/%E5%BE%AA%E7%8E%AF%E3%80%81%E8%BF%AD%E4%BB%A3%E3%80%81%E9%80%92%E5%BD%92%E3%80%81%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\ArthurDream\assets\css\APlayer.min.css"><script src="\ArthurDream\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-循环（loop）"><a href="#1-循环（loop）" class="headerlink" title="1.循环（loop）"></a>1.循环（loop）</h3><p>循环是指在满足条件的情况下，重复执行同一段代码，比如 while 语句</p><h3 id="2-迭代（Iterate）"><a href="#2-迭代（Iterate）" class="headerlink" title="2.迭代（Iterate）"></a>2.迭代（Iterate）</h3><p>迭代是指按照某种顺序逐个访问对象中的每一项，比如 for 语句</p><h3 id="3-递归（recursion）"><a href="#3-递归（recursion）" class="headerlink" title="3.递归（recursion）"></a>3.递归（recursion）</h3><p>递归是指一个函数不断调用自身的行为，比如斐波那契数列</p><h3 id="4-遍历（traversal）"><a href="#4-遍历（traversal）" class="headerlink" title="4.遍历（traversal）"></a>4.遍历（traversal）</h3><p>遍历是指按照一定的规则访问树形结构中的每个节点，而且每个节点都只访问一次</p><h3 id="Python中的逐个访问"><a href="#Python中的逐个访问" class="headerlink" title="Python中的逐个访问"></a>Python中的逐个访问</h3><p>在 Python 中，如果想要访问对象中的每个元素，可以像下面这样做，以列表举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_list = [<span class="string">'r'</span>,<span class="string">'o'</span>,<span class="string">'c'</span>,<span class="string">'k'</span>,<span class="string">'y'</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> my_list:</span><br><span class="line">...print(i,end=<span class="string">' '</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">r o c k y </span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>除了上述方法以外，还可以像下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_iter = iter(my_list)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_iter.__next__()</span><br><span class="line"><span class="string">'r'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_iter.__next__() </span><br><span class="line"><span class="string">'o'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_iter.__next__() </span><br><span class="line"><span class="string">'c'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_iter.__next__() </span><br><span class="line"><span class="string">'k'</span></span><br><span class="line">&gt;&gt;&gt;my_iter.__next__() </span><br><span class="line"><span class="string">'y'</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_iter.__next__()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt; </span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p>上面的 iter() 是一个内建函数，返回的是一个迭代器对象</p><p>在 Python3 中，所有的迭代器对象都有 next() 方法，迭代器，当然是可迭代的，在上面的例子中， next() 就是要获得下一个对象，但是作为一个 “懒惰” 的程序员来说，上面的那种方法一个个的敲太麻 烦了，所以就有了下面的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">...print(my_iter.__next__())</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">Traceback (most recent call last): </span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt; </span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p>上面出现了错误，我们先不管，再来它一次：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_iter = iter(my_list) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">...print(my_iter.__next__())</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">r </span><br><span class="line">o </span><br><span class="line">c </span><br><span class="line">k </span><br><span class="line">y </span><br><span class="line">Traceback (most recent call last): </span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt; </span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p>看了上面演示的例子可以发现，如果我们用 for 循环来写的话，当到了末尾的时候就自动结束了，但是 用了 next() 的话，当完成最后一个的时候它不会自动结束，还会向下继续，但是后面已经没有元素 了，所以就发出了一个 StopIteration 的信息，即停止迭代。<br>在这我们还要再关注一下迭代器对象的另一个特点，看上上个的那个例子就可以知道，对象 my_iter 被 迭代结束后，即每个元素都读取了一遍之后，指针就移到了最后一个元素后面，如果想要再访问的话， 指针并没有自动移动到初始位置，所以会报 StopIteration，如果想要重新开始的话，就需要重新载入 迭代对象。</p><h3 id="文件迭代器"><a href="#文件迭代器" class="headerlink" title="文件迭代器"></a>文件迭代器</h3><p>现在有一个 “test.txt” 的文件，文件内容是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">My name <span class="keyword">is</span> Rocky </span><br><span class="line">I love Python </span><br><span class="line">a，hhhhhhh</span><br></pre></td></tr></table></figure><p>现在用迭代器来尝试操作这个文件，我们其实在之前两天讲述有关文件的知识的时候已经讲过了，就是 用 readline() 一行一行的读，当然在实际操作中，我们是绝对不会这样做的，因为我们 “懒” 啊，一定要 让它自动进行，比较常用的方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'test.txt'</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> f: </span><br><span class="line">...print(line,end=<span class="string">' '</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">My name <span class="keyword">is</span> Rocky</span><br><span class="line">I love Python </span><br><span class="line">a，hhhhhhh &gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>上面的过程当然用 next() 也能够读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'test.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.__next__() </span><br><span class="line"><span class="string">'My name is Rocky\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.__next__() </span><br><span class="line"><span class="string">'I love Python\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.__next__() </span><br><span class="line"><span class="string">'a，hhhhhhh'</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.__next__() </span><br><span class="line">Traceback (most recent call last): </span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt; </span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p>用 next() 就可以直接读取每行的内容，这就说明文件是天生可迭代的对象，不需要用 iter() 转换。 再者，我们用 for 来实现迭代，本质上就是自动调用 next() ，只不过这个工作被 for 偷偷的做了，所以 for 是活雷锋无疑了。</p><p>文章参考Rocky0429公众号中的部分内容</p>]]></content>
      
      
      <categories>
          
          <category> 基础概念 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础概念 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java命名规范</title>
      <link href="/ArthurDream/2020/07/07/Java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
      <url>/ArthurDream/2020/07/07/Java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\ArthurDream\assets\css\APlayer.min.css"><script src="\ArthurDream\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、命名规范</p><p>1、 项目名全部小写</p><p>2、 包名全部小写</p><p>3、 类名首字母大写，如果类名由多个单词组成，每个单词的首字母都要大写。</p><p>如：public class MyFirstClass{}</p><p>4、 变量名、方法名首字母小写，如果名称由多个单词组成，每个单词的首字母都要大写。</p><p>如：int index=0;</p><pre><code>public void toString(){}</code></pre><p>5、 常量名全部大写</p><p>如：public static final String GAME_COLOR=”RED”;</p><p>6、所有命名规则必须遵循以下规则：</p><p>1)、名称只能由字母、数字、下划线、$符号组成</p><p>2)、不能以数字开头</p><p>3)、名称不能使用JAVA中的关键字。</p><p>4)、坚决不允许出现中文及拼音命名。</p><p>二、注释规范</p><p>1、   类注释</p><p>在每个类前面必须加上类注释，注释模板如下：</p><p>/**</p><ul><li><p>Copyright (C), 2006-2010, ChengDu Lovo info. Co., Ltd.</p></li><li><p>FileName: Test.java</p></li><li><p>类的详细说明</p></li><li></li><li><p>@author 类创建者姓名</p><ul><li>@Date    创建日期</li></ul></li><li><p>@version 1.00</p></li></ul><p>*/</p><p>2、   属性注释</p><p>在每个属性前面必须加上属性注释，注释模板如下：</p><p>/** 提示信息 */</p><p>private String strMsg = null;</p><p>3、   方法注释</p><p>在每个方法前面必须加上方法注释，注释模板如下：</p><p>/**</p><ul><li><p>类方法的详细使用说明</p></li><li></li><li><p>@param 参数1 参数1的使用说明</p></li><li><p>@return 返回结果的说明</p></li><li><p>@throws 异常类型.错误代码 注明从此类方法中抛出异常的说明</p></li></ul><p>*/</p><p>4、   构造方法注释</p><p>在每个构造方法前面必须加上注释，注释模板如下：</p><p>/**</p><ul><li><p>构造方法的详细使用说明</p></li><li></li><li><p>@param 参数1 参数1的使用说明</p></li><li><p>@throws 异常类型.错误代码 注明从此类方法中抛出异常的说明</p></li></ul><p>*/</p><p>5、   方法内部注释</p><p>在方法内部使用单行或者多行注释，该注释根据实际情况添加。</p><p>如：//背景颜色</p><pre><code>Color bgColor = Color.RED</code></pre><p>内容仅供个人学习、记录使用，侵删</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>session的空属性判断问题</title>
      <link href="/ArthurDream/2020/07/07/session%E7%9A%84%E7%A9%BA%E5%B1%9E%E6%80%A7%E5%88%A4%E6%96%AD%E9%97%AE%E9%A2%98/"/>
      <url>/ArthurDream/2020/07/07/session%E7%9A%84%E7%A9%BA%E5%B1%9E%E6%80%A7%E5%88%A4%E6%96%AD%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\ArthurDream\assets\css\APlayer.min.css"><script src="\ArthurDream\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    记录一个今天遇到的小问题：（新手编程，若有错误，希望各位及时指正，感激不尽）<br>​    首先，若后端放session时，某些属性为空值（比如下面的resume属性），则到了session里时会变为空字符串，而不是null。</p><p>原因：<br>​    首先什么是session？<br>​    “当访问服务器某个网页的时候，会在服务器端的内存里开辟一块内存，这块内存就叫做session”</p><p>​    由此可以看出，当访问页面的时候是已开辟了一段内存的，而null是不指向任何对象，不分配内存空间的;空字符串“”才会分配内存空间。</p><p>​    故此时一切对session里空属性的判断不能对null判断，而应是对空字符串判断，如下面的应为sj.resume!=’ ‘而不能是sj.resume！=null</p><p>​    下面是一段前端代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">function sendResume(jid,jobName,uname)&#123;</span><br><span class="line"></span><br><span class="line">        alert(&quot;点击确定开始投递&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;*定义个数组放发送的变量并赋值*&#x2F;</span><br><span class="line">        var sj &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        sj.jid&#x3D;jid;</span><br><span class="line">        sj.jobName&#x3D;jobName;</span><br><span class="line">        sj.uname&#x3D;uname;</span><br><span class="line">        sj.sid&#x3D;&#39;$&#123;session.sid &#125;&#39;;</span><br><span class="line">        sj.name&#x3D;&#39;$&#123;session.name &#125;&#39;;</span><br><span class="line">        sj.resume&#x3D;&#39;$&#123;session.resume&#125;&#39;;</span><br><span class="line">        &#x2F;*若后端放session时，某些属性为空值，则到了session里时会变为空字符串，</span><br><span class="line">            故此时一切对其空属性的判断不能对null判断，而是对空字符串判断，如下面的sj.resume!&#x3D;&#39;&#39; *&#x2F;</span><br><span class="line">        if (sj.resume!&#x3D;&#39;&#39;) &#123;</span><br><span class="line"></span><br><span class="line">            alert(&quot;要进入ajax了&quot;);</span><br><span class="line">          $.ajax(&#123;</span><br><span class="line">            &#x2F;*请求类型*&#x2F;</span><br><span class="line">            type:&quot;post&quot;,</span><br><span class="line">            &#x2F;*请求路径*&#x2F;</span><br><span class="line">            url:&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;application&#x2F;sendResume&quot;,</span><br><span class="line">            &#x2F;*设置类型*&#x2F;</span><br><span class="line">            contentType:&quot;application&#x2F;json;charset&#x3D;UTF-8&quot;,</span><br><span class="line">            &#x2F;*向后端传数据，stringify方法将sj转换为json格式*&#x2F;</span><br><span class="line">            data: JSON.stringify(sj),</span><br><span class="line">            &#x2F;*然后在这个弹窗里去显示出来*&#x2F;</span><br><span class="line">            success:function(data) &#123;</span><br><span class="line"></span><br><span class="line">                &#x2F;*后端return的值默认都装在叫data的变量里*&#x2F;</span><br><span class="line">                if(data&#x3D;&quot;0&quot;)&#123;</span><br><span class="line">                    alert(&quot;投递成功！&quot;);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    alert(&quot;投递失败！&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                window.location.reload();</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">            alert(&quot;请先上传简历！&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/ArthurDream/2020/07/06/hello-world/"/>
      <url>/ArthurDream/2020/07/06/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\ArthurDream\assets\css\APlayer.min.css"><script src="\ArthurDream\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Hello World！</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Demo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
